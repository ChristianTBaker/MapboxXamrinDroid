com/facebook/soloader/ApkSoSource = Com.Facebook.Soloader.ApkSoSource
  <init>(Landroid/content/Context;Ljava/io/File;Ljava/lang/String;I)V = .ctor(Android.Content.Context, Java.IO.File, string, int)
  <init>(Landroid/content/Context;Ljava/lang/String;I)V = .ctor(Android.Content.Context, string, int)
  PREFER_ANDROID_LIBS_DIRECTORY = PreferAndroidLibsDirectory
com/facebook/soloader/ApplicationSoSource = Com.Facebook.Soloader.ApplicationSoSource
  <init>(Landroid/content/Context;I)V = .ctor(Android.Content.Context, int)
  checkAndMaybeUpdate()Z = CheckAndMaybeUpdate()
  loadLibrary(Ljava/lang/String;ILandroid/os/StrictMode$ThreadPolicy;)I = LoadLibrary(string, int, Android.OS.StrictMode.ThreadPolicy)
  unpackLibrary(Ljava/lang/String;)Ljava/io/File; = UnpackLibrary(string)
com/facebook/soloader/DirectorySoSource = Com.Facebook.Soloader.DirectorySoSource
  <init>(Ljava/io/File;I)V = .ctor(Java.IO.File, int)
  flags = Flags
  ON_LD_LIBRARY_PATH = OnLdLibraryPath
  RESOLVE_DEPENDENCIES = ResolveDependencies
  soDirectory = SoDirectory
  loadLibrary(Ljava/lang/String;ILandroid/os/StrictMode$ThreadPolicy;)I = LoadLibrary(string, int, Android.OS.StrictMode.ThreadPolicy)
  loadLibraryFrom(Ljava/lang/String;ILjava/io/File;Landroid/os/StrictMode$ThreadPolicy;)I = LoadLibraryFrom(string, int, Java.IO.File, Android.OS.StrictMode.ThreadPolicy)
  unpackLibrary(Ljava/lang/String;)Ljava/io/File; = UnpackLibrary(string)
com/facebook/soloader/DoNotOptimize = Com.Facebook.Soloader.IDoNotOptimize
com/facebook/soloader/ExoSoSource = Com.Facebook.Soloader.ExoSoSource
  <init>(Landroid/content/Context;Ljava/lang/String;)V = .ctor(Android.Content.Context, string)
  makeUnpacker()Lcom/facebook/soloader/UnpackingSoSource$Unpacker; = MakeUnpacker()
com/facebook/soloader/ExtractFromZipSoSource = Com.Facebook.Soloader.ExtractFromZipSoSource
  <init>(Landroid/content/Context;Ljava/lang/String;Ljava/io/File;Ljava/lang/String;)V = .ctor(Android.Content.Context, string, Java.IO.File, string)
  mZipFileName = MZipFileName
  mZipSearchPattern = MZipSearchPattern
  makeUnpacker()Lcom/facebook/soloader/UnpackingSoSource$Unpacker; = MakeUnpacker()
com/facebook/soloader/FileLocker = Com.Facebook.Soloader.FileLocker
  close()V = Close()
  lock(Ljava/io/File;)Lcom/facebook/soloader/FileLocker; = Lock(Java.IO.File)
com/facebook/soloader/MinElf = Com.Facebook.Soloader.MinElf
  <init>()V = .ctor()
  DT_NEEDED = DtNeeded
  DT_NULL = DtNull
  DT_STRTAB = DtStrtab
  ELF_MAGIC = ElfMagic
  PN_XNUM = PnXnum
  PT_DYNAMIC = PtDynamic
  PT_LOAD = PtLoad
  extract_DT_NEEDED(Ljava/io/File;)[Ljava/lang/String; = Extract_DT_NEEDED(Java.IO.File)
  extract_DT_NEEDED(Ljava/nio/channels/FileChannel;)[Ljava/lang/String; = Extract_DT_NEEDED(Java.Nio.Channels.FileChannel)
com/facebook/soloader/NativeLibrary = Com.Facebook.Soloader.NativeLibrary
  <init>(Ljava/util/List;)V = .ctor(System.Collections.Generic.IList<string>)
  getError()Ljava/lang/UnsatisfiedLinkError; = Error
  ensureLoaded()V = EnsureLoaded()
  initialNativeCheck()V = InitialNativeCheck()
  loadLibraries()Z = LoadLibraries()
com/facebook/soloader/NoopSoSource = Com.Facebook.Soloader.NoopSoSource
  <init>()V = .ctor()
  loadLibrary(Ljava/lang/String;ILandroid/os/StrictMode$ThreadPolicy;)I = LoadLibrary(string, int, Android.OS.StrictMode.ThreadPolicy)
  unpackLibrary(Ljava/lang/String;)Ljava/io/File; = UnpackLibrary(string)
com/facebook/soloader/SoFileLoader = Com.Facebook.Soloader.ISoFileLoader
  load(Ljava/lang/String;I)V = Load(string, int)
com/facebook/soloader/SoLoader = Com.Facebook.Soloader.SoLoader
  <init>()V = .ctor()
  SOLOADER_ALLOW_ASYNC_INIT = SoloaderAllowAsyncInit
  SOLOADER_DISABLE_BACKUP_SOSOURCE = SoloaderDisableBackupSosource
  SOLOADER_ENABLE_EXOPACKAGE = SoloaderEnableExopackage
  SOLOADER_LOOK_IN_ZIP = SoloaderLookInZip
  areSoSourcesAbisSupported()Z = AreSoSourcesAbisSupported()
  deinitForTest()V = DeinitForTest()
  getLibraryPath(Ljava/lang/String;)Ljava/lang/String; = GetLibraryPath(string)
  init(Landroid/content/Context;Z)V = Init(Android.Content.Context, bool)
  init(Landroid/content/Context;I)V = Init(Android.Content.Context, int)
  loadLibrary(Ljava/lang/String;)Z = LoadLibrary(string)
  loadLibrary(Ljava/lang/String;I)Z = LoadLibrary(string, int)
  makeLdLibraryPath()Ljava/lang/String; = MakeLdLibraryPath()
  makeNonZipPath(Ljava/lang/String;)Ljava/lang/String; = MakeNonZipPath(string)
  prependSoSource(Lcom/facebook/soloader/SoSource;)V = PrependSoSource(Com.Facebook.Soloader.SoSource)
  setInTestMode()V = SetInTestMode()
  setSystemLoadLibraryWrapper(Lcom/facebook/soloader/SystemLoadLibraryWrapper;)V = SetSystemLoadLibraryWrapper(Com.Facebook.Soloader.ISystemLoadLibraryWrapper)
  unpackLibraryAndDependencies(Ljava/lang/String;)Ljava/io/File; = UnpackLibraryAndDependencies(string)
com/facebook/soloader/SoSource = Com.Facebook.Soloader.SoSource
  <init>()V = .ctor()
  LOAD_FLAG_ALLOW_IMPLICIT_PROVISION = LoadFlagAllowImplicitProvision
  LOAD_FLAG_ALLOW_SOURCE_CHANGE = LoadFlagAllowSourceChange
  LOAD_FLAG_MIN_CUSTOM_FLAG = LoadFlagMinCustomFlag
  LOAD_RESULT_CORRUPTED_LIB_FILE = LoadResultCorruptedLibFile
  LOAD_RESULT_IMPLICITLY_PROVIDED = LoadResultImplicitlyProvided
  LOAD_RESULT_LOADED = LoadResultLoaded
  LOAD_RESULT_NOT_FOUND = LoadResultNotFound
  PREPARE_FLAG_ALLOW_ASYNC_INIT = PrepareFlagAllowAsyncInit
  PREPARE_FLAG_FORCE_REFRESH = PrepareFlagForceRefresh
  addToLdLibraryPath(Ljava/util/Collection;)V = AddToLdLibraryPath(System.Collections.Generic.ICollection<string>)
  getLibraryPath(Ljava/lang/String;)Ljava/lang/String; = GetLibraryPath(string)
  getSoSourceAbis()[Ljava/lang/String; = GetSoSourceAbis()
  loadLibrary(Ljava/lang/String;ILandroid/os/StrictMode$ThreadPolicy;)I = LoadLibrary(string, int, Android.OS.StrictMode.ThreadPolicy)
  prepare(I)V = Prepare(int)
  unpackLibrary(Ljava/lang/String;)Ljava/io/File; = UnpackLibrary(string)
com/facebook/soloader/SystemLoadLibraryWrapper = Com.Facebook.Soloader.ISystemLoadLibraryWrapper
  loadLibrary(Ljava/lang/String;)V = LoadLibrary(string)
com/facebook/soloader/SysUtil = Com.Facebook.Soloader.SysUtil
  <init>()V = .ctor()
  deleteOrThrow(Ljava/io/File;)V = DeleteOrThrow(Java.IO.File)
  dumbDeleteRecursive(Ljava/io/File;)V = DumbDeleteRecursive(Java.IO.File)
  fallocateIfSupported(Ljava/io/FileDescriptor;J)V = FallocateIfSupported(Java.IO.FileDescriptor, long)
  findAbiScore([Ljava/lang/String;Ljava/lang/String;)I = FindAbiScore(string[], string)
  getAppVersionCode(Landroid/content/Context;)I = GetAppVersionCode(Android.Content.Context)
  getSupportedAbis()[Ljava/lang/String; = GetSupportedAbis()
  makeApkDepBlock(Ljava/io/File;Landroid/content/Context;)[B = MakeApkDepBlock(Java.IO.File, Android.Content.Context)
com/facebook/soloader/UnpackingSoSource = Com.Facebook.Soloader.UnpackingSoSource
  <init>(Landroid/content/Context;Ljava/io/File;)V = .ctor(Android.Content.Context, Java.IO.File)
  <init>(Landroid/content/Context;Ljava/lang/String;)V = .ctor(Android.Content.Context, string)
  mContext = MContext
  mCorruptedLib = MCorruptedLib
  getDepsBlock()[B = GetDepsBlock()
  getSoStorePath(Landroid/content/Context;Ljava/lang/String;)Ljava/io/File; = GetSoStorePath(Android.Content.Context, string)
  makeUnpacker()Lcom/facebook/soloader/UnpackingSoSource$Unpacker; = MakeUnpacker()
  prepare(Ljava/lang/String;)V = Prepare(string)
  setSoSourceAbis([Ljava/lang/String;)V = SetSoSourceAbis(string[])
